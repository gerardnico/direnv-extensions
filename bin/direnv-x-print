#!/bin/bash


# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-vault.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-vault.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-string.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-string.sh"




if [ "${1:-}" == "synopsis" ]; then
  # No synopsis
  exit
fi

# Assign the first argument to the ENV_FILE_PATTERN variable
ENV_FILE_PATTERN="${1:-.env.*}"
ENV_FILES=$(find . -maxdepth 1 -type f -name "$ENV_FILE_PATTERN" 2> /dev/null)
ENV_FILE_BASE='.env'
if [ -f "$ENV_FILE_BASE" ]; then
  ENV_FILES="$ENV_FILE_BASE $ENV_FILES"
fi

if [ "$ENV_FILES" == "" ]; then
  echo::err "$ENV_FILES"
  exit 1;
fi


# Initialize the OUTPUT_KEY_VALUES variable
declare -A OUTPUT_KEY_VALUES=()


# Processing the env files
for ENV_FILE in $ENV_FILES; do

  # Process each line in the ENV_FILE_PATTERN file
  while IFS= read -r LINE; do

      # Skip comments (lines starting with #)
      if [[ $LINE =~ ^[[:space:]]*#.*$ ]]; then
          continue
      fi
      # Separate KEY and VALUE
      if [[ $LINE =~ ^([^=]+)=(.*)$ ]]; then

          # Note: You can't call any statement before ${BASH_REMATCH[1]} otherwise
          # you get
          # BASH_REMATCH[1]: unbound variable
          KEY="${BASH_REMATCH[1]}"
          VALUE="${BASH_REMATCH[2]}"
          KEY=$(string::trim "${KEY^^}") # Convert KEY to uppercase and trim
          VALUE=$(string::trim "${VALUE}")

          echo::debug "Processing Key ($KEY) and value ($VALUE)"

          # If the value is a vault expression, get the value from the vault
          # or return the value otherwise
          if ! VALUE=$(vault::filter "$VALUE"); then
            echo::err "The vault value was not found for key ($KEY)"
            exit 1
          fi

          # Add the key to the OUTPUT_KEY_VALUES
          OUTPUT_KEY_VALUES["$KEY"]=$VALUE

      fi
  done <<< "$(
                  # tr -d '\r' to remove the CR if the file is a windows file (ie CRLF)
                  cat "$ENV_FILE" | tr -d '\r';
                  # If there is no new line at the end,
                  # the line is not processed by read
                  # https://stackoverflow.com/questions/20010741/why-does-unix-while-read-not-read-last-line
                  echo;
             )"

done

if [ ${#OUTPUT_KEY_VALUES[@]} -eq 0 ]; then
    echo::err "No env variables found in $ENV_FILES. Did you forget a new line at the end"
    exit 1
fi

# Create the bash export statement
EXPORTED_STATEMENT=""
declare -a EXPORTED_KEYS=()
for KEY in "${!OUTPUT_KEY_VALUES[@]}"; do
  VALUE=${OUTPUT_KEY_VALUES[$KEY]}
  EXPORTED_STATEMENT+="export $KEY=$VALUE"$'\n'
  EXPORTED_KEYS+=("$KEY")
done

echo "${EXPORTED_STATEMENT}export DIRENV_EXPORTED_ENVS=$(IFS=, ; echo "${EXPORTED_KEYS[*]}")"


