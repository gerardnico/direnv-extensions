.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "direnv-x-print" "1" "" "Version Latest" "Vault and multi-env support to direnv"
.hy
.SH NAME
.PP
Add vault and multi-env support to direnv
.SS Example
.PP
With this \f[V].env\f[R] file in your project root: * Add one or more
\f[V].env\f[R] file in your project root
.IP
.nf
\f[C]
POSTGRES_USER=postgres
POSTGRES_PASSWORD=vault:secret/postgres/password
\f[R]
.fi
.PP
You would get
.IP
.nf
\f[C]
export POSTGRES_USER=postgres
export POSTGRES_PASSWORD=welcome # value from vault
export DIRENV_EXPORTED_ENVS=POSTGRES_USER,POSTGRES_PASSWORD
\f[R]
.fi
.PP
\f[V]DIRENV_EXPORTED_ENVS\f[R] may be used to recreate a list of env.
For instance, for docker in the form \f[V]-e KEY=VALUE\f[R]
.SS How it works
.PP
You create an \f[V].envrc\f[R] file at the root of your project with the
following command
.IP
.nf
\f[C]
eval \[dq]$(direnv-x-print)\[dq]
\f[R]
.fi
.SH DESCRIPTION
.PP
This script will take all env file (\f[V].env\f[R] and \f[V].env.*\f[R])
* print it in a bash export format * retrieve value from a vault if the
value has the form: \f[V]vault:/path/to/secret/field\f[R] * export the
keys in the \f[V]DIRENV_EXPORTED_KEYS\f[R] variable Why?
\f[V]DIRENV_EXPORTED_ENVS\f[R] may be used to recreate a list of env.
For instance, for docker in the form \f[V]-e KEY=VALUE\f[R]
.SH Vault Value Syntax
.PP
The vault syntax value is \f[V]vault:/path/to/secret/fieldName\f[R]
.PP
You would have installed vault locally and initialized it with
.IP
.nf
\f[C]
vault login
\f[R]
.fi
.SH How to use DIRENV_EXPORTED_ENVS to list and pass envs as argument at the command line
.PP
This example shows you how to pass environment variable to docker in the
form \f[V]-e KEY=VALUE\f[R]
.IP
.nf
\f[C]
declare -a DOCKER_ENV_ARGS=()
IFS=\[aq],\[aq] read -ra DIRENV_EXPORTED_KEYS_AS_ARRAY <<< \[dq]\[dq]
for ENV in \[dq]${DIRENV_EXPORTED_KEYS_AS_ARRAY[\[at]]}\[dq]; do
    # Filter out all docker variable
    if [[  == DOCKER* ]]; then
        continue
    fi
    if [[ -v  ]]; then
        DOCKER_ENV_ARGS+=(\[dq]-e\[dq])
        DOCKER_ENV_ARGS+=(\[dq]=${!ENV}\[dq])
    fi
done

# then add them to docker
docker run \[rs]
  \[dq]${DOCKER_ENV_ARGS[\[at]]}\[dq] 
\f[R]
.fi
